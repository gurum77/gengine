//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    float3  gEnableDirLights;           // Offset:    0, size:   12
    DirectionalLight gDirLights[3];     // Offset:   16, size:  192
    float3  gEnablePointLights;         // Offset:  208, size:   12
    PointLight gPointLights[3];         // Offset:  224, size:  240
    float3  gEnableSpotLights;          // Offset:  464, size:   12
    SpotLight gSpotLights[3];           // Offset:  480, size:  288
    float3  gEyePosW;                   // Offset:  768, size:   12
    bool    gEnableFog;                 // Offset:  780, size:    4
    float   gFogStart;                  // Offset:  784, size:    4
    float   gFogRange;                  // Offset:  788, size:    4
    float4  gFogColor;                  // Offset:  800, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    Material gMaterial;                 // Offset:  256, size:   64
}

//
// 2 local object(s)
//
Texture2D gDiffuseMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    BorderColor = float4(1, 0, 0, 0);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 LightTex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 70 "E:\higengine\trunk\Lib\DirectX11\FX\LightTex.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 74
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 77
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEnableDirLights;           // Offset:    0 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   16
                //       float4 Diffuse;                // Offset:   32
                //       float4 Specular;               // Offset:   48
                //       float3 Direction;              // Offset:   64
                //       float pad;                     // Offset:   76
                //
                //   } gDirLights[3];                   // Offset:   16 Size:   192
                //   float3 gEnablePointLights;         // Offset:  208 Size:    12
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  224
                //       float4 Diffuse;                // Offset:  240
                //       float4 Specular;               // Offset:  256
                //       float3 Position;               // Offset:  272
                //       float Range;                   // Offset:  284
                //       float3 Att;                    // Offset:  288
                //       float pad;                     // Offset:  300
                //
                //   } gPointLights[3];                 // Offset:  224 Size:   240
                //   float3 gEnableSpotLights;          // Offset:  464 Size:    12
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  480
                //       float4 Diffuse;                // Offset:  496
                //       float4 Specular;               // Offset:  512
                //       float3 Position;               // Offset:  528
                //       float Range;                   // Offset:  540
                //       float3 Direction;              // Offset:  544
                //       float Spot;                    // Offset:  556
                //       float3 Att;                    // Offset:  560
                //       float pad;                     // Offset:  572
                //
                //   } gSpotLights[3];                  // Offset:  480 Size:   288
                //   float3 gEyePosW;                   // Offset:  768 Size:    12
                //   bool gEnableFog;                   // Offset:  780 Size:     4
                //   float gFogStart;                   // Offset:  784 Size:     4
                //   float gFogRange;                   // Offset:  788 Size:     4
                //   float4 gFogColor;                  // Offset:  800 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                                              { 0, 1.000000, 0, 0},
                                              { 0, 0, 1.000000, 0},
                                              { 0, 0, 0, 1.000000} }
                dcl_constantbuffer cb0[51], dynamicIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 19
                
                #line 85 "E:\higengine\trunk\Lib\DirectX11\FX\LightTex.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 88
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[48].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 91
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 94
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 101
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 113
                mov r3.xyz, l(0,0,0,0)  // ambient<0: -0f,1: -0f,2: -0f>
                
                #line 121
                mov r1.w, l(0)  // i<0: 0>
                mov r4.xyz, r3.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r6.xyz, r3.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.w, r1.w  // i<0>
                loop 
                  ilt r4.w, r3.w, l(3)
                  breakc_z r4.w
                
                #line 124
                  mov r4.w, r3.w
                  dp3 r5.w, cb0[0].xyzx, icb[r4.w + 0].xyzx
                  eq r5.w, r5.w, l(1.000000)
                  if_nz r5.w
                    nop 
                    mov r7.xyz, cb1[16].xyzx  // mat<0,1,2>
                    mov r8.xyz, cb1[17].xyzx  // mat<4,5,6>
                    mov r9.xyzw, cb1[18].xyzw  // mat<8,9,10,11>
                    imul null, r5.w, r3.w, l(4)
                    mov r10.xyz, cb0[r5.w + 1].xyzx  // L<0,1,2>
                    mov r11.xyz, cb0[r5.w + 2].xyzx  // L<4,5,6>
                    mov r12.xyz, cb0[r5.w + 3].xyzx  // L<8,9,10>
                    mov r13.xyz, cb0[r5.w + 4].xyzx  // L<12,13,14>
                    mov r14.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r15.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 70 "LightHelper.fx"
                    mov r13.xyz, -r13.xyzx  // lightVec<0,1,2>
                
                #line 73
                    mul r7.xyz, r7.xyzx, r10.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 78
                    dp3 r5.w, r13.xyzx, r14.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                    lt r6.w, l(0.000000), r5.w
                    mov r10.xyz, -r13.xyzx
                    dp3 r7.w, r10.xyzx, r14.xyzx
                    add r7.w, r7.w, r7.w
                    mov r7.w, -r7.w
                    mul r13.xyz, r7.wwww, r14.xyzx
                    add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r7.w, r10.xyzx, r15.xyzx
                    max r7.w, r7.w, l(0.000000)
                    log r7.w, r7.w
                    mul r7.w, r7.w, r9.w
                    exp r7.w, r7.w  // specFactor<0:NaN:Inf>
                    mul r8.xyz, r8.xyzx, r5.wwww
                    mul r8.xyz, r11.xyzx, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r9.xyz, r9.xyzx, r7.wwww
                    mul r9.xyz, r12.xyzx, r9.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 82
                    movc r8.xyz, r6.wwww, r8.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    movc r9.xyz, r6.wwww, r9.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 126 "E:\higengine\trunk\Lib\DirectX11\FX\LightTex.fx"
                    mov r7.xyz, r7.xyzx  // A<0:Inf,1:Inf,2:Inf>
                    mov r8.xyz, r8.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r5.xyz, r5.xyzx, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r6.xyz, r6.xyzx, r9.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 124
                  endif 
                
                #line 132
                  dp3 r5.w, cb0[13].xyzx, icb[r4.w + 0].xyzx
                  eq r5.w, r5.w, l(1.000000)
                  if_nz r5.w
                    nop 
                    mov r7.xyz, cb1[16].xyzx  // mat<0,1,2>
                    mov r8.xyz, cb1[17].xyzx  // mat<4,5,6>
                    mov r9.xyzw, cb1[18].xyzw  // mat<8,9,10,11>
                    imul null, r5.w, r3.w, l(5)
                    mov r10.xyz, cb0[r5.w + 14].xyzx  // L<0,1,2>
                    mov r11.xyz, cb0[r5.w + 15].xyzx  // L<4,5,6>
                    mov r12.xyz, cb0[r5.w + 16].xyzx  // L<8,9,10>
                    mov r13.xyz, cb0[r5.w + 17].xyzx  // L<12,13,14>
                    mov r6.w, cb0[r5.w + 17].w  // L<15>
                    mov r14.xyz, cb0[r5.w + 18].xyzx  // L<16,17,18>
                    mov r15.xyz, v1.xyzx  // pos<0,1,2>
                    mov r16.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r17.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 106 "LightHelper.fx"
                    mov r15.xyz, -r15.xyzx
                    add r13.xyz, r13.xyzx, r15.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 109
                    dp3 r5.w, r13.xyzx, r13.xyzx
                    sqrt r15.y, r5.w  // d<0:NaN:Inf>
                
                #line 112
                    lt r5.w, r6.w, r15.y
                
                #line 116
                    if_z r5.w
                      div r13.xyz, r13.xyzx, r15.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 119
                      mul r7.xyz, r7.xyzx, r10.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 124
                      dp3 r5.w, r13.xyzx, r16.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 128
                      lt r6.w, l(0.000000), r5.w
                      mov r10.xyz, -r13.xyzx
                      dp3 r7.w, r10.xyzx, r16.xyzx
                      add r7.w, r7.w, r7.w
                      mov r7.w, -r7.w
                      mul r13.xyz, r7.wwww, r16.xyzx
                      add r10.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r7.w, r10.xyzx, r17.xyzx
                      max r7.w, r7.w, l(0.000000)
                      log r7.w, r7.w
                      mul r7.w, r7.w, r9.w
                      exp r7.w, r7.w  // specFactor<0:NaN:Inf>
                      mul r8.xyz, r8.xyzx, r5.wwww
                      mul r8.xyz, r11.xyzx, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mul r9.xyz, r9.xyzx, r7.wwww
                      mul r9.xyz, r12.xyzx, r9.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 128
                      movc r8.xyz, r6.wwww, r8.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      movc r9.xyz, r6.wwww, r9.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 138
                      mul r15.z, r15.y, r15.y
                      mov r15.x, l(1.000000)
                      dp3 r5.w, r14.xyzx, r15.xyzx
                      div r5.w, l(1.000000), r5.w  // att<0:NaN:Inf>
                      mul r8.xyz, r5.wwww, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mul r9.xyz, r5.wwww, r9.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 116
                    else 
                      mov r7.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 134 "E:\higengine\trunk\Lib\DirectX11\FX\LightTex.fx"
                    mov r7.xyz, r7.xyzx  // A<0:Inf,1:Inf,2:Inf>
                    mov r8.xyz, r8.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r5.xyz, r5.xyzx, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r6.xyz, r6.xyzx, r9.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 132
                  endif 
                
                #line 140
                  dp3 r4.w, cb0[29].xyzx, icb[r4.w + 0].xyzx
                  eq r4.w, r4.w, l(1.000000)
                  if_nz r4.w
                    nop 
                    mov r7.xyz, cb1[16].xyzx  // mat<0,1,2>
                    mov r8.xyz, cb1[17].xyzx  // mat<4,5,6>
                    mov r9.xyzw, cb1[18].xyzw  // mat<8,9,10,11>
                    imul null, r4.w, r3.w, l(6)
                    mov r10.xyz, cb0[r4.w + 30].xyzx  // L<0,1,2>
                    mov r11.xyz, cb0[r4.w + 31].xyzx  // L<4,5,6>
                    mov r12.xyz, cb0[r4.w + 32].xyzx  // L<8,9,10>
                    mov r13.xyz, cb0[r4.w + 33].xyzx  // L<12,13,14>
                    mov r14.xyz, cb0[r4.w + 34].xyzx  // L<16,17,18>
                    mov r15.xyz, cb0[r4.w + 35].xyzx  // L<20,21,22>
                    mov r5.w, cb0[r4.w + 33].w  // L<15>
                    mov r4.w, cb0[r4.w + 34].w  // L<19>
                    mov r16.xyz, v1.xyzx  // pos<0,1,2>
                    mov r17.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r18.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 158 "LightHelper.fx"
                    mov r16.xyz, -r16.xyzx
                    add r13.xyz, r13.xyzx, r16.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 161
                    dp3 r6.w, r13.xyzx, r13.xyzx
                    sqrt r16.y, r6.w  // d<0:NaN:Inf>
                
                #line 164
                    lt r5.w, r5.w, r16.y
                
                #line 168
                    if_z r5.w
                      div r13.xyz, r13.xyzx, r16.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 171
                      mul r7.xyz, r7.xyzx, r10.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 176
                      dp3 r5.w, r13.xyzx, r17.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 180
                      lt r6.w, l(0.000000), r5.w
                      mov r10.xyz, -r13.xyzx
                      dp3 r7.w, r10.xyzx, r17.xyzx
                      add r7.w, r7.w, r7.w
                      mov r7.w, -r7.w
                      mul r13.xyz, r7.wwww, r17.xyzx
                      add r13.xyz, r10.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r7.w, r13.xyzx, r18.xyzx
                      max r7.w, r7.w, l(0.000000)
                      log r7.w, r7.w
                      mul r7.w, r7.w, r9.w
                      exp r7.w, r7.w  // specFactor<0:NaN:Inf>
                      mul r8.xyz, r8.xyzx, r5.wwww
                      mul r8.xyz, r11.xyzx, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mul r9.xyz, r9.xyzx, r7.wwww
                      mul r9.xyz, r12.xyzx, r9.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      movc r8.xyz, r6.wwww, r8.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      movc r9.xyz, r6.wwww, r9.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 190
                      dp3 r5.w, r10.xyzx, r14.xyzx
                      max r5.w, r5.w, l(0.000000)
                      log r5.w, r5.w
                      mul r4.w, r4.w, r5.w
                      exp r4.w, r4.w  // spot<0:NaN:Inf>
                
                #line 193
                      mul r16.z, r16.y, r16.y
                      mov r16.x, l(1.000000)
                      dp3 r5.w, r15.xyzx, r16.xyzx
                      div r5.w, r4.w, r5.w  // att<0:NaN:Inf>
                      mul r7.xyz, r4.wwww, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mul r8.xyz, r5.wwww, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mul r9.xyz, r5.wwww, r9.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 168
                    else 
                      mov r7.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 142 "E:\higengine\trunk\Lib\DirectX11\FX\LightTex.fx"
                    mov r7.xyz, r7.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r8.xyz, r8.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r5.xyz, r5.xyzx, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r6.xyz, r6.xyzx, r9.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 140
                  endif 
                
                #line 121
                  iadd r3.w, r3.w, l(1)  // i<0>
                endloop 
                
                #line 151
                add r0.xyz, r4.xyzx, r5.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r6.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 156
                ine r1.x, l(0, 0, 0, 0), cb0[48].w
                if_nz r1.x
                  mov r1.x, -cb0[49].x
                  add r0.w, r0.w, r1.x
                  div r0.w, r0.w, cb0[49].y
                  max r0.w, r0.w, l(0.000000)
                  min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 161
                  mov r1.xyz, -r0.xyzx
                  add r1.xyz, r1.xyzx, cb0[50].xyzx
                  mul r1.xyz, r0.wwww, r1.xyzx
                  add r0.xyz, r0.xyzx, r1.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 156
                endif 
                
                #line 165
                mul r0.w, r2.w, cb1[17].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 214 instruction slots used
                            
            };
        }

    }

}

